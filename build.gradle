buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.9'
    }
}

allprojects {
    group 'io.t28'
    version '0.1.0'

    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'net.ltgt.errorprone'

    repositories {
        jcenter()
    }

    jacoco {
        toolVersion = '0.7.9'
        reportsDir = file("${project.buildDir}/reports/jacoco")
    }
}

subprojects {
    def javaVersion = JavaVersion.VERSION_1_8
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    repositories {
        mavenCentral()
    }

    sourceSets {
        main {
            java.srcDirs = ['src/main/java', 'build/classes/main/generated']
        }
    }

    dependencies {
        errorprone 'com.google.errorprone:error_prone_core:2.0.18'

        testCompile 'junit:junit:4.12'
        testCompile 'org.mockito:mockito-core:2.7.5'
        testCompile 'org.assertj:assertj-core:3.6.2'
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs += [
                '-Xep:ImmutableEnumChecker:OFF',
                '-Xep:ConstantField:ERROR',
                '-Xep:MethodCanBeStatic:ERROR',
                '-Xep:MixedArrayDimensions:ERROR',
                '-Xep:MultiVariableDeclaration:ERROR',
                '-Xep:MultipleTopLevelClasses:ERROR',
                '-Xep:PackageLocation:ERROR',
                '-Xep:PrivateConstructorForUtilityClass:ERROR',
                '-Xep:RemoveUnusedImports:ERROR',
                '-Xep:ThrowsUncheckedException:ERROR',
                '-Xep:UnnecessaryStaticImport:ERROR',
                '-Xep:WildcardImport:ERROR'
        ]
    }

    jacocoTestReport {
        group = 'verification'
        description = 'Generate test coverage reports'
        dependsOn = ['test']

        reports {
            xml.enabled = false
            csv.enabled = false
            html.enabled = false
        }
    }
    check.dependsOn jacocoTestReport
}

task jacocoRootReport(type: JacocoReport, group: 'verification') {
    description = 'Generate an aggregated coverage report from all projects'

    dependsOn = subprojects.findAll().test

    additionalSourceDirs = files(subprojects.findAll().sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.findAll().sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.findAll().sourceSets.main.output)
    executionData = files(subprojects.findAll().jacocoTestReport.executionData)

    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }

    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

// see https://github.com/codacy/codacy-coverage-reporter
configurations {
    codacy
}
repositories {
    maven {
        url "https://jitpack.io"
    }
    maven {
        url "http://dl.bintray.com/typesafe/maven-releases"
    }
}
dependencies {
    codacy 'com.github.codacy:codacy-coverage-reporter:-SNAPSHOT'
}
task sendCoverageToCodacy(type: JavaExec, group: 'other') {
    dependsOn = ['jacocoRootReport']
    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    args = [
            "-l",
            "Java",
            "-r",
            "${rootProject.buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
    ]
}
